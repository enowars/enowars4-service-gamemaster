from typing import Optional, Dict
import aiohttp
import json
import random
import string
import sys
import time
import os
from logging import Logger
from urllib.parse import urlparse
from .user_agents import random_useragent
from enochecker_async import BrokenServiceException, OfflineException
from telnetlib import Telnet

class HttpInterface:
    def __init__(self, address: str, port: int, logger: Logger, httpsession: aiohttp.ClientSession) -> None:
        self.address = address 
        self.port = port
        self.logger = logger
        self.http_session = httpsession
        self.scheme = "http"
    async def close(self):
        await self.http_session.close()
    @staticmethod
    async def setup(address: str, port: int, logger: Logger):
        jar = aiohttp.CookieJar(unsafe=True)
        http_session = aiohttp.ClientSession(headers={"user-agent": random_useragent()}, cookie_jar=jar)   #, 'Content-Type': 'multipart/form-data;'
        return HttpInterface(address, port, logger, http_session)

    async def register(self, username: str, email: str, password: str) ->str:
        try:
            params = {'username': username, 'email':email, 'password': password}
            response:aiohttp.ClientResponse = await self.http_session.post(self.scheme + "://" + self.address + ":" + str(self.port) + "/api/account/register", data=params)
            text = await response.text()
            self.logger.debug(text)
            response.close()
        except:
            raise OfflineException()
        if response.status!=200:
            raise BrokenServiceException(f"Register Failed: {response}")
    async def login(self, username: str, password: str) ->aiohttp.ClientResponse:
        try:
            params = {'username': username, 'password': password}
            response:aiohttp.ClientResponse = await self.http_session.post(self.scheme + "://" + self.address + ":" + str(self.port) + "/api/account/login", data=params)
        except:
            raise OfflineException()
        if response.status!=200:
            raise BrokenServiceException(f"Login Failed: {response}")
    async def create_session(self, name:str, notes:str, password:str) -> aiohttp.ClientResponse:
        try:
            params = {'name': name, 'notes': notes, 'password': password}
            response:aiohttp.ClientResponse = await self.http_session.post(self.scheme + "://" + self.address + ":" + str(self.port) + "/api/gamesession/create", data=params)
        except:
            raise OfflineException()
        if response.status!=200:
            raise BrokenServiceException(f"create_session Failed: {response}")
        return response
    async def add_to_session(self, sessionid:int, username:str) -> None:
        try:
            params = {'sessionid': sessionid, 'username': username}
            response:aiohttp.ClientResponse = await self.http_session.post(self.scheme + "://" + self.address + ":" + str(self.port) + "/api/gamesession/adduser", data=params)
        except:
            raise OfflineException()
        if response.status!=200:
            raise BrokenServiceException(f"add_to_session Failed: {response.status}")
    async def test(self) -> None:
        try:
            response:aiohttp.ClientResponse = await self.http_session.get(self.scheme + "://" + self.address + ":" + str(self.port) + "/api/debug/test")
        except:
            raise OfflineException()
        if response.status!=200:
            raise BrokenServiceException(f"test Failed: {response}")
        return await response.text()

        
#        public async Task<IActionResult> AddToken([FromForm] string name, [FromForm] string description, [FromForm] bool isprivate, [FromForm] IFormFile icon)        
# 
# var url = $"{Scheme}://{Address}:{Port}/api/account/addtoken";
# var ImageContent = new ByteArrayContent(ImageData);
# ImageContent.Headers.Add("Content-Type", "image/png");
# ImageContent.Headers.Add("Content-Disposition", "form-data; name=\"icon\"; filename=\"Arrow.png\"");
# var foo = new MultipartFormDataContent();
# foo.Add(new StringContent(name), "\"name\"");
# foo.Add(new StringContent(description), "\"description\"");
# foo.Add(new StringContent("true"), "\"isPrivate\"");
# foo.Add(ImageContent, "\"icon\"", "\"Arrow.png\"");


    async def tokenadd(self):

        # data = FormData()
        # data.add_field('file',
        #        bytes([random.randint(0,256) for _ in 64]),
        #        filename='Arrow.png',
        #        content_type='image/png')
        # data.add_field("name", "name")
        # data.add_field("description", "description")
        # data.add_field("isPrivate", "true")
        try:
            data = { 'icon': bytes([random.randint(0,255) for _ in range(64)]),
                     'name': 'AAAA',
                     'description' : 'description',
                     'isPrivate' : 'true',
            }
            response:aiohttp.ClientResponse = await self.http_session.post(self.scheme + "://" + self.address + ":" + str(self.port) + "/api/account/addtoken", data=data)
            res = await response.json()
            response.close()
            print(len(res), ":", res)

            return res
            
            ## lock (Rand) for (; uUID.Length < 128; uUID += Rand.Next().ToString("X8")) ;
        except Exception as e:
            print(e)
            raise e


    async def tokencheck(self, uuid):
        try:
            params = {'UUID': uuid}
            response:aiohttp.ClientResponse = await self.http_session.post(self.scheme + "://" + self.address + ":" + str(self.port) + "/api/token/info", data=params)
            if response.status==200:
                print ("Found Token")
                #res = await response.text()
                res = await response.json()
                print(res['description'].encode().decode())
                #sys.stdout.flush()
                #with Telnet(self.address, 1337) as tn:
                #    tn.write(
                        #"1\n".encode() + 
                #        res['description'].encode() + b"\n")
                #    print(tn.read_until(b"\n"))
                #with Telnet(self.address, 1338) as tn:
                #    tn.write("2\n".encode() + res['description'].encode() + b"\n")
                #    print(tn.read_until(b"\n"))
                print()
                #print(res)
                response.close()
                return True
            if (response.status != 404): print ("Unexpected Status: ", response.status)
            return False
        except Exception as e:
            print(e)
            raise e
